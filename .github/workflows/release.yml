name: Wadm Release
on:
  push:
    tags: ["v*"] # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch: # Allow manual creation of artifacts without a release
  pull_request:
    branches: [main]

jobs:
  build:
    name: build release assets
    runs-on: ${{ matrix.config.os }}
    env: ${{ matrix.config.env }}
    strategy:
      matrix:
        config:
          # NOTE: We are building on an older version of ubuntu because of libc compatibility
          # issues. Namely, if we build on a new version of libc, it isn't backwards compatible with
          # old versions. But if we build on the old version, it is compatible with the newer
          # versions running in ubuntu 22 and its ilk
          - {
              os: "ubuntu-20.04",
              arch: "amd64",
              extension: "",
              env: {},
              targetPath: "target/release/",
            }
          - {
              os: "ubuntu-20.04",
              arch: "aarch64",
              extension: "",
              env: { OPENSSL_DIR: "/usr/local/openssl-aarch64" },
              targetPath: "target/aarch64-unknown-linux-gnu/release/",
            }
          - {
              os: "macos-latest",
              arch: "amd64",
              extension: "",
              env: {},
              targetPath: "target/release/",
            }
          - {
              os: "windows-latest",
              arch: "amd64",
              extension: ".exe",
              env: {},
              targetPath: "target/release/",
            }
          - {
              os: "macos-latest",
              arch: "aarch64",
              extension: "",
              env: {},
              targetPath: "target/aarch64-apple-darwin/release/",
            }
    steps:
      - uses: actions/checkout@v3

      - name: set the release version (tag)
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: set the release version (main)
        if: github.ref == 'refs/heads/main'
        shell: bash
        run: echo "RELEASE_VERSION=canary" >> $GITHUB_ENV

      - name: lowercase the runner OS name
        shell: bash
        run: |
          OS=$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')
          echo "RUNNER_OS=$OS" >> $GITHUB_ENV

      - name: Install latest Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        if: matrix.config.arch != 'aarch64'
        with:
          toolchain: stable
          components: clippy, rustfmt

      - name: setup for cross-compile builds
        if: matrix.config.arch == 'aarch64' && matrix.config.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          rustup toolchain install stable-aarch64-unknown-linux-gnu
          rustup target add --toolchain stable-aarch64-unknown-linux-gnu aarch64-unknown-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Install latest Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        if: matrix.config.arch == 'aarch64' && matrix.config.os == 'macos-latest'
        with:
          toolchain: stable
          components: clippy, rustfmt
          target: aarch64-apple-darwin

      - name: Install latest Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        if: matrix.config.arch == 'aarch64' && matrix.config.os == 'ubuntu-20.04'
        with:
          toolchain: stable
          components: clippy, rustfmt
          target: aarch64-unknown-linux-gnu

      - name: build release
        if: matrix.config.arch != 'aarch64'
        run: "cargo build --release --bin wadm --features cli"

      - name: build release
        if: matrix.config.arch == 'aarch64' && matrix.config.os == 'macos-latest'
        run: "cargo build --release --bin wadm --features cli --target aarch64-apple-darwin"

      - name: build release
        if: matrix.config.arch == 'aarch64' && matrix.config.os == 'ubuntu-20.04'
        run: "cargo build --release --bin wadm --features cli --target aarch64-unknown-linux-gnu"

      - uses: actions/upload-artifact@v3
        with:
          name: wadm-${{ env.RELEASE_VERSION }}-${{ env.RUNNER_OS }}-${{ matrix.config.arch }}
          if-no-files-found: error
          path: |
            ${{ matrix.config.targetPath }}wadm${{ matrix.config.extension }}
      
  publish:
    name: publish release assets
    runs-on: ubuntu-20.04
    needs: build
    steps:
        ######## WHY ARE THESE STEPS HERE?
        - name: set the release version (tag)
          if: startsWith(github.ref, 'refs/tags/v')
          shell: bash
          run: echo "RELEASE_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
        - name: set the release version (main)
          if: github.ref == 'refs/heads/main'
          shell: bash
          run: echo "RELEASE_VERSION=canary" >> $GITHUB_ENV
        #########
        - name: download release assets
          uses: actions/download-artifact@v3
        # If this command does not generate a checksum for all binaries, may need to import vars from previous step
        - name: generate checksums
          run: |
            sha256sum * > checksums-${{ env.RELEASE_VERSION }}.txt
        - name: Publish to GHCR
          uses: softprops/action-gh-release@v1
          with:
            token: ${{ secrets.WADM_GITHUB_TOKEN }}
            prerelease: false
            draft: false

  crate:
    name: Publish crate
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Install latest Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
      - name: Cargo login
        run: cargo login ${{ secrets.CRATES_TOKEN }}
        shell: bash

      - name: Cargo publish
        run: cargo publish
        shell: bash

  docker-image:
    name: Build and push docker images
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          ## CHECK WHAT USERNAME SHOULD BE
          username: ${{ github.repository_owner }}
          password: ${{ secrets.WADM_GITHUB_TOKEN }}
      
      - name: lowercase repository owner
        run: |
          echo "OWNER=${GITHUB_REPOSITORY_OWNER,,}" >>$GITHUB_ENV

      - name: set the release version (tag)
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: Build and push (tag)
        uses: docker/build-push-action@v3
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          push: true
          tags: ghcr.io/${{ env.OWNER }}/wadm:latest,ghcr.io/${{ env.OWNER }}/wadm:${{ env.RELEASE_VERSION }}

      - name: Build and push (main)
        uses: docker/build-push-action@v3
        if: github.ref == 'refs/heads/main'
        with:
          push: true
          tags: ghcr.io/${{ env.OWNER }}/wadm:canary
