name: Wadm Release

on:
  push:
    tags: ["v*"] # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch: # Allow manual creation of artifacts without a release
  pull_request:
    branches: [main]

jobs:
  create-mix-release:
    # Run on tag push or on manual dispatch. Release will not be created for manual dispatch
    # if: ${{ startswith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    name: Build application release tarball
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2022, macos-11]
        include:
          - os: ubuntu-20.04
            rust-target: x86_64-unknown-linux-gnu
            release-tarball-filename: x86_64-linux.tar.gz
          - os: windows-2022
            rust-target: x86_64-pc-windows-gnu
            release-tarball-filename: x86_64-windows.tar.gz
          - os: macos-11
            rust-target: x86_64-apple-darwin
            release-tarball-filename: x86_64-macos.tar.gz
    runs-on: ${{ matrix.os }}
    env:
      working-directory: wadm
      MIX_ENV: prod
      ERLANG_VERSION: 24
      ELIXIR_VERSION: 1.13.3
    steps:
      - uses: actions/checkout@v2
      # Install erlang/OTP and elixir
      - name: Install erlang and elixir
        if: ${{ startswith(matrix.os, 'ubuntu') || startswith(matrix.os, 'windows') }}
        uses: erlef/setup-beam@v1
        with:
          otp-version: "=${{ env.ERLANG_VERSION }}"
          elixir-version: ${{ env.ELIXIR_VERSION }}
          install-hex: true
          install-rebar: true
      - name: Install erlang and elixir
        if: ${{ startswith(matrix.os, 'macos') }}
        run: |
          brew install erlang
          brew install elixir
          mix local.rebar --force
          mix local.hex --force

      - name: Retrieve Mix Dependencies Cache
        uses: actions/cache@v2
        id: mix-cache #id to use in retrieve action
        with:
          path: |
            wadm/deps
            wadm/_build
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles('wadm/mix.exs', 'wadm/mix.lock') }}

      - name: Install Mix Dependencies
        working-directory: ${{env.working-directory}}
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: |
          mix do deps.get, compile

      - name: Create Mix Release
        working-directory: ${{env.working-directory}}
        shell: bash
        run: mix release wadm

      - name: TarGEEZY Mix Release
        working-directory: ${{env.working-directory}}/_build/prod/rel/wadm
        shell: bash
        run: |
          tar -czvf ${{ matrix.release-tarball-filename }} bin erts-* lib releases
          cp ${{ matrix.release-tarball-filename }} ../../../../

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.release-tarball-filename }}
          path: ${{env.working-directory}}/${{ matrix.release-tarball-filename }}

  release-docker:
    # if: startswith(github.ref, 'refs/tags/') # Only run on tag push
    name: Release Linux Docker Image
    runs-on: ubuntu-latest
    env:
      MIX_ENV: prod
      working-directory: wadm

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to AzureCR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURECR_PUSH_URL }}
          username: ${{ secrets.AZURECR_PUSH_USER }}
          password: ${{ secrets.AZURECR_PUSH_PASSWORD }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_PUSH_USER }}
          password: ${{ secrets.DOCKERHUB_PUSH_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        id: buildx-builder

      - name: Determine version
        shell: bash
        run: echo "wadm_version=$(grep 'version' ${{env.working-directory}}/mix.exs | cut -d '"' -f2)" >> $GITHUB_ENV

      - name: Build and release docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx-builder.outputs.name }}
          #TODO: PLEASE FOR THE LOVE OF GOD CHANGE IT BACK
          push: false
          file: ${{env.working-directory}}/Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: |
            wasmcloud.azurecr.io/wadm:${{ env.wadm_version }}
            wasmcloud.azurecr.io/wadm:latest
            wasmcloud/wadm:${{ env.wadm_version }}
            wasmcloud/wadm:latest

  github-release:
    if: startswith(github.ref, 'refs/tags/') # Only run on tag push
    needs: [create-mix-release]
    runs-on: ubuntu-latest
    steps:
      - name: Download Release Tarballs
        uses: actions/download-artifact@v2
        with:
          path: release

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/**/*.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          draft: false
